name: Production Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to build'
        required: true
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
            arch: universal
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run full test suite
      run: |
        yarn type-check
        yarn lint
        yarn test
        
    - name: Build application
      run: yarn build
      
    # macOS Code Signing Setup
    - name: Setup macOS certificates
      if: matrix.platform == 'mac'
      uses: apple-actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      continue-on-error: true
      
    # Windows Code Signing Setup  
    - name: Setup Windows certificate
      if: matrix.platform == 'win'
      run: |
        echo "${{ secrets.WINDOWS_CERTIFICATE }}" | base64 --decode > certificate.p12
      shell: bash
      continue-on-error: true
      
    # Platform-specific builds with signing
    - name: Build and sign for macOS
      if: matrix.platform == 'mac'
      run: yarn dist:mac
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
        CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        
    - name: Build and sign for Windows
      if: matrix.platform == 'win'
      run: yarn dist:win
      env:
        CSC_LINK: certificate.p12
        CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PWD }}
        
    - name: Build for Linux
      if: matrix.platform == 'linux'
      run: yarn dist:linux
      
    # Security scan
    - name: Run security audit
      run: yarn audit --audit-level moderate
      continue-on-error: true
      
    # Upload to release
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/*.dmg
          release/*.exe
          release/*.AppImage
          release/*.deb
          release/*.rpm
          release/*.snap
          release/*.blockmap
          release/latest*.yml
        tag_name: ${{ github.event.inputs.tag || github.ref_name }}
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # Cleanup sensitive files
    - name: Cleanup certificates
      if: always()
      run: |
        rm -f certificate.p12
      shell: bash
      
    - name: Upload build logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ matrix.platform }}
        path: |
          release/builder-debug.yml
          release/builder-effective-config.yaml
        retention-days: 7

  # Notify on completion
  notify:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-release.result == 'success'
      run: |
        echo "✅ Production release completed successfully!"
        echo "Release: ${{ github.event.inputs.tag || github.ref_name }}"
        
    - name: Notify failure
      if: needs.build-and-release.result == 'failure'
      run: |
        echo "❌ Production release failed!"
        echo "Please check the build logs for details."
        exit 1